#!/usr/bin/env perl 

#
# Query cluster releases versions using releases.json from artifactor
#

use strict;
use warnings;
use FindBin qw($Bin $Script);
use JSON qw( decode_json );
use Data::Dumper;
use File::Basename;
use LWP::Simple;

sub usage {
    my ($err_msg) = @_;
    print STDERR << "EOF";
  Usage: query_releases -cluster|c <cluster name> -bundle|b <bundle name> -package|p <package name>
-----------------------------------------------------------------------------------
Example:
query_releases -c axonitered -b oozie
query_releases -c axonitered -b oozie -p yoozie
query_releases -c axonitered -b oozie -p yoozie -v
query_releases -c axonitered -b hbase
query_releases -c axonitered -b hive
EOF
    print($err_msg) if ($err_msg);
    exit 1;
}

use Getopt::Long;
my $clustername='axonitered';
my $bundlename='hadoop_core';
my $component_arg;
my $packagename;
my $verbose=0;
my $result = GetOptions ("clustername|c=s" => \$clustername,
                         "bundlename|b=s"  => \$bundlename,
                         "packagename|p=s" => \$packagename,
                         "verbose"         => \$verbose);

#################################################################################
# Get the hadoop releases last modified info
#################################################################################
my $json_last_mod=`curl -G -s 'http://edge.artifactory.yahoo.com:8000/artifactory/api/storage/hadoop_releases/?lastModified'`;
my $last_mod_struct = decode_json($json_last_mod);

my $last_mod_uri = $last_mod_struct->{uri};
print "last modified releases uri='$last_mod_uri'\n" if $verbose;
print Dumper($last_mod_struct) if $verbose;

#################################################################################
# Get the hadoop releases last modified uri info
#################################################################################
my $json_last_mod_uri=`curl -G -s '$last_mod_uri'`;
my $last_mod_uri_struct = decode_json($json_last_mod_uri);

my $download_uri = $last_mod_uri_struct->{downloadUri};
print "download_uri='$download_uri'\n" if $verbose;
print Dumper($last_mod_uri_struct) if $verbose;

#################################################################################
# Get the hadoop releases last modified releases.json
#################################################################################
my $json_last_mod_releases=`curl -G -s '$download_uri'`;
my $last_mod_releases = decode_json($json_last_mod_releases);
# print Dumper($last_mod_releases);

#################################################################################
# Get the specified target cluster in the hadoop releases last modified
# releases.json
#################################################################################
my $clusters = $last_mod_releases->{clusters};
# print Dumper($clusters);
my $cluster;
foreach (@$clusters) {
    if ($_->{name} eq $clustername) {
        print "Found cluster '$clustername'\n" if $verbose;
        $cluster = $_;
    }
}
if (! $cluster) {
    die "ERROR: Did not find cluster '$clustername'!!!\n";
}
# print Dumper($cluster);

#################################################################################
# Get the specified bundle for the specified target cluster in the
# hadoop releases last modified releases.json
#################################################################################
my $bundles = $cluster->{bundles};
my $bundle;
foreach (@$bundles) {
    if ($_->{name} eq $bundlename) {
        print "Found bundle $bundlename for cluster $clustername\n" if $verbose;
        $bundle = $_;
    }
}
if (! $bundle) {
    die "ERROR: Did not find bundle '$bundlename'!!!\n";
}

if ($packagename) {
    my $packages = $bundle->{packages};
    if ($verbose) {
        print "$packagename => $packages->{$packagename}\n";
    } else {
        print "$packages->{$packagename}\n";
    }
} else {
    print Dumper($bundle->{packages});
}


exit;


========================
YAMAS Metrics/Monitoring
========================

As of ystorm_contrib-0.1.0.37 The http spout exports metrics through the storm 
metrics system. The ystorm_contrib package also includes with it a yamas metrics 
collector that you can include with your topology to place these metrics in YAMAS.

Yamas Metrics Consumer Basics
=============================

Adding Dependencies
-------------------

.. code-block:: xml

   <dependency>
       <groupId>yahoo.yinst.ystorm_contrib</groupId>
       <artifactId>yamas_metrics_consumer</artifactId>
       <version>0.1.0.37</version>
   </dependency>

Configuring Storm to Use YAMAS
------------------------------

And add the following when submitting your topology:

.. code-block:: java

   import com.yahoo.storm.metrics.yamas.YamasMetricsConsumer; 
   ...
   conf.registerMetricsConsumer(YamasMetricsConsumer.class, “yamas-app”, 1);

Supported Metrics
-----------------

.. csv-table:: Supported Metrics for Storm
   :header: "Name/Pattern", "Description"
   :widths: 15, 45

   "``uptimeSecs``", "The uptime in seconds for the worker."
   "``startTimeSecs``, "The UNIX time when the worker came up."
   "GC/``ParNew/ConcurrentMarkSweep_count``", The number of garbage collections that have happened."
   "GC/``ParNew/ConcurrentMarkSweep_timeMs``", "The time spent doing those garbage collections."	
   "Memory/``heap/nonHeap_unusedBytes``", "The unused bytes."	
   "Memory/``heap/nonHeap_usedBytes``", "The bytes currently used."	
   "Memory/``heap/nonHeap_maxBytes``", "The maximum bytes for this memory type."	
   "Memory/``heap/nonHeap_maxBytes``", "Initial bytes for this memory type
Memory/(heap or nonHeap)_virtualFreeBytes	Max - used bytes
Memory/(heap or nonHeap)_committedBytes	Bytes committed to be used
__ack-count	Number of tuples acked on non-system streams
__ack-count_system	Number of tuples acked on system streams
__fail-count	Number of failed tuples on non-system streams
__fail-count_system	Number of failed tuples on system streams
__emit-count	Number of tuples emitted on non-system streams
__emit-count_system	Number of tuples emitted on system streams
__execute-count	Number of tuples executed on non-system streams
__execute-count_system	Number of tuples executed on system streams



System Metrics YAMAS Collector Already Handles
==============================================

Worker-Level Metrics
--------------------


Tuple-Level Metrics
-------------------


Dimensions
==========

YAMAS metrics are collected with the following dimensions:
worker-host
worker-port
component-id (“__system” for worker wide metrics)
task-id (“-1” for worker wide metrics)

Steps for Collecting Metrics
============================

1. Register Metrics
-------------------

.. code-block:: java

   transient CountMetric _countMetric;
   transient ReducedMetric _wordLengthMeanMetric;

   @Override
   public void prepare(Map conf, TopologyContext context, OutputCollector collector) {
       _collector = collector;
       _countMetric = new CountMetric();
       _wordLengthMeanMetric = new ReducedMetric(new MeanReducer());
    
       context.registerMetric("execute_count", _countMetric, 5);
       context.registerMetric("word_length", _wordLengthMeanMetric, 60);
   }

2. Register a Metrics Consumer Before Launching a Topology
----------------------------------------------------------

.. code-block:: java

   conf.registerMetricsConsumer(LoggingMetricsConsumer.class, 2);

3. Update the Metrics When Something Happens
--------------------------------------------

.. code-block:: java

   @Override
   public void execute(Tuple tuple) { 
       String word = tuple.getString(0);
       _collector.emit(tuple, new Values(word + "!!!"));
       _collector.ack(tuple); 
       _countMetric.incr();
       _wordLengthMeanMetric.update(word.length());
   } 

YAMAS Metrics Consumer
======================

Please use YAMAS instead of Logging for metrics.

.. code-block:: java

   import com.yahoo.storm.metrics.yamas.YamasMetricsConsumer; 
   conf.registerMetricsConsumer(YamasMetricsConsumer.class, “yamas-app”, 1);
   
   <dependency>
       <groupId>yahoo.yinst.ystorm_contrib</groupId>
       <artifactId>yamas_metrics_consumer</artifactId>
       <version>0.1.0</version>
   </dependency>

Customization of YAMAS Logging
==============================

Storm metrics do not distinguish between an increment and a set once they get to the Collector.

They also are very generic and could return complex objects like Maps, Lists, etc.

To handle set vs. increment cases we created an AbsoluteNumber class, that when a metric returns this YAMAS will call set() instead of increment().

For more complex metrics you can subclass the collector and override

public boolean handleDataPoint(DataPoint dp, MonMetrics yamas) throws MonMetricsException;





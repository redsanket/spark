<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>hadooptest</groupId>
	<artifactId>hadooptest-parent</artifactId>
	<version>1.0-SNAPSHOT</version>
	<packaging>pom</packaging>

	<name>hadooptest</name>
	<url>http://maven.apache.org</url>

	<!-- This allows us to depend directly on SNAPSHOT -->
	<repositories>
		<repository>
			<id>apache-snapshots</id>
			<url>http://repository.apache.org/content/groups/snapshots-group/</url>
			<releases>
				<enabled>true</enabled>
			</releases>
			<snapshots>
				<enabled>true</enabled>
			</snapshots>
		</repository>
	</repositories>

	<!-- Define Hadoop version used to compile HTF code for 2.x -->
	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<hadoop.version.ut.old>2.0.4.0.1304041432</hadoop.version.ut.old>
		<hadoop.version.current>2.2.0-SNAPSHOT</hadoop.version.current>
		<hadoop.version>${hadoop.version.current}</hadoop.version>
	</properties>

	<profiles>
		<!-- PROFILE FOR ECLIPSE boxes: For build environment -->
		<!-- PROFILE FOR YINST: yinst install jars required by profile-ci -->
		<!-- PROFILE FOR CI: For CI build environment on corp RE hosts, and CI 
			test execution or build on colo gateway clients. -->

		<!-- PROFILE FOR ECLIPSE -->
		<profile>
			<id>profile-eclipse</id>

			<activation>
				<file>
					<!-- Check if the SVN tunnel script exists. It should only exists on 
						the COLO. SVN_SSH=/gridtools/generic/bin/ssh_proxy_tunnel.sh -->
					<!-- <missing>/gridtools/generic/bin/ssh_proxy_tunnel.sh</missing> -->
					<!-- <missing>/homes/hadoopqa</missing> -->
					
					<!-- coretest jars need to be installed separately beforehand by running 
						mvn install in the coretest project -->
					<exists>${user.home}/.m2/repository/coretest/coretest/1.0-SNAPSHOT/coretest-1.0-SNAPSHOT.jar</exists>
				</file>
			</activation>

			<properties>
				<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
			</properties>

			<dependencies>
				<dependency>
					<groupId>coretest</groupId>
					<artifactId>coretest</artifactId>
					<version>1.0-SNAPSHOT</version>
					<scope>provided</scope>
				</dependency>
				<dependency>
					<groupId>coretest</groupId>
					<artifactId>coretest</artifactId>
					<classifier>sources</classifier>
					<version>1.0-SNAPSHOT</version>
					<scope>provided</scope>
				</dependency>
				<!-- GDM automation dependency for yjava auth -->
				<dependency>
					<groupId>yahoo.yinst.yjava_byauth</groupId>
					<artifactId>yjava_byauth</artifactId>
					<version>0.6.0</version>
				</dependency>
			</dependencies>
		</profile>


		<!-- PROFILE FOR YINST INSTALL -->
		<profile>
			<id>profile-yinst</id>
			<!-- This profile is used for installing jar files used by profile-ci. 
				It runs a script to set up jar files inaccessible from the ymaven repo (e.g. 
				coretest), or via the ymaven repo on the colo (e.g. yjava_byauth) -->
			<activation>
				<file>
					<!-- jar for coretest and yjava_byauth should be installed beforehand 
						by calling 'mvn clean'. Currently, mvn does not support multiple file checking. -->
					<exists>/usr/local/bin/yinst</exists>
				</file>
			</activation>
			<build>
				<plugins>
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>exec-maven-plugin</artifactId>
						<version>1.2.1</version>
						<executions>
							<execution>
								<id>exec</id>
								<goals>
									<goal>exec</goal>
								</goals>
								<phase>clean</phase>
							</execution>
						</executions>
						<configuration>
							<executable>scripts/ci_install_jar</executable>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>

		<!-- PROFILE FOR CI -->
		<profile>
			<id>profile-ci</id>
			<!-- This profile is used for 1) building the maven package target on 
				the corp RE hosts as part of the nightly CI, 2) occasional manual build on 
				the colo gateway client, 3) executing tests on the colo gateway clients as 
				part of the nightly CI. The pre-requisite to using this profile is running 
				the maven target: "mvn clean" which will invoke an external script "scripts/ci_install_jar" 
				to yinst install dependent jar files. This includes the coretest jar which 
				is not in maven repo, and the yjava_byauth jar which is not accessible via 
				the ymaven repository from the colo. -->
			<activation>
				<file>
					<!-- jar for coretest and yjava_byauth should be installed beforehand 
						by calling 'mvn initalize'. Currently, mvn does not support multiple file 
						checking. -->
					<exists>/home/y/lib/jars/yjava_byauth.jar</exists>
					<!-- <exists>/home/y/etc/coretest/java/lib/coretest-1.0-SNAPSHOT.jar</exists> -->
				</file>
			</activation>

			<properties>
				<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
				<coretest.jar.dir>/home/y/etc/coretest/java/lib/</coretest.jar.dir>
				<yinst.lib.dir>/home/y/lib/jars/</yinst.lib.dir>
			</properties>

			<dependencies>
				<dependency>
					<groupId>system</groupId>
					<artifactId>system-coretest</artifactId>
					<version>0.9.2</version>
					<scope>system</scope>
					<systemPath>${coretest.jar.dir}/coretest-1.0-SNAPSHOT.jar</systemPath>
				</dependency>
				<!-- GDM automation dependency for yjava auth -->
				<dependency>
					<groupId>system</groupId>
					<artifactId>yjava_byauth</artifactId>
					<version>0.9.2</version>
					<scope>system</scope>
					<systemPath>${yinst.lib.dir}/yjava_byauth.jar</systemPath>
				</dependency>
			</dependencies>
		</profile>

	</profiles>

	<build>
		<resources>
			<resource>
				<directory>src/main/resources</directory>
			</resource>
			<resource>
				<directory>resources</directory>
			</resource>
		</resources>

		<plugins>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jar-plugin</artifactId>
				<version>2.2</version>
				<executions>
					<execution>
						<goals>
							<goal>test-jar</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-javadoc-plugin</artifactId>
				<version>2.9</version>
				<configuration>
					<outputDirectory>../..</outputDirectory>
					<reportOutputDirectory>../..</reportOutputDirectory>
					<destDir>hadooptest-javadoc</destDir>
					<aggregate>true</aggregate>
					<quiet>true</quiet>
					<excludePackageNames>hadooptest.cluster.mini:hadooptest.cluster.mini.*:hadooptest.cluster.standalone</excludePackageNames>
				</configuration>
			</plugin>

		</plugins>

	</build>

	<dependencies>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.8.2</version>
		</dependency>
		<dependency>
			<groupId>log4j</groupId>
			<artifactId>log4j</artifactId>
			<version>1.2.12</version>
		</dependency>

		<!-- GDM automation dependency for JSON -->
		<dependency>
			<groupId>net.sf.json-lib</groupId>
			<artifactId>json-lib</artifactId>
			<version>2.4</version>
			<classifier>jdk15</classifier>
		</dependency>

		<dependency>
			<groupId>org.apache.hadoop</groupId>
			<artifactId>hadoop-common</artifactId>
			<version>${hadoop.version}</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>org.apache.hadoop</groupId>
			<artifactId>hadoop-common</artifactId>
			<version>${hadoop.version}</version>
			<type>test-jar</type>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>org.apache.hadoop</groupId>
			<artifactId>hadoop-hdfs</artifactId>
			<version>${hadoop.version}</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>org.apache.hadoop</groupId>
			<artifactId>hadoop-hdfs</artifactId>
			<version>${hadoop.version}</version>
			<type>test-jar</type>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>org.apache.hadoop</groupId>
			<artifactId>hadoop-mapreduce-client-app</artifactId>
			<version>${hadoop.version}</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>org.apache.hadoop</groupId>
			<artifactId>hadoop-mapreduce-client-common</artifactId>
			<version>${hadoop.version}</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>org.apache.hadoop</groupId>
			<artifactId>hadoop-mapreduce-client-core</artifactId>
			<version>${hadoop.version}</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>org.apache.hadoop</groupId>
			<artifactId>hadoop-mapreduce-client-hs</artifactId>
			<version>${hadoop.version}</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>org.apache.hadoop</groupId>
			<artifactId>hadoop-mapreduce-client-jobclient</artifactId>
			<version>${hadoop.version}</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>org.apache.hadoop</groupId>
			<artifactId>hadoop-mapreduce-client-jobclient</artifactId>
			<version>${hadoop.version}</version>
			<type>test-jar</type>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>org.apache.hadoop</groupId>
			<artifactId>hadoop-yarn-common</artifactId>
			<version>${hadoop.version}</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>org.apache.hadoop</groupId>
			<artifactId>hadoop-yarn-server-tests</artifactId>
			<version>${hadoop.version}</version>
			<type>test-jar</type>
			<scope>provided</scope>
		</dependency>

		<dependency>
			<groupId>org.apache.hadoop</groupId>
			<artifactId>hadoop-yarn-client</artifactId>
			<version>${hadoop.version}</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>org.apache.hadoop</groupId>
			<artifactId>hadoop-yarn-server-nodemanager</artifactId>
			<version>${hadoop.version}</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>org.apache.hadoop</groupId>
			<artifactId>hadoop-yarn-server-resourcemanager</artifactId>
			<version>${hadoop.version}</version>
			<scope>provided</scope>
		</dependency>

		<!-- This is temporarily disabled due to Bugzilla Ticket 6204559 - Hadoop 
			internal dist package hadoop_mvn_yarn is missing the hadoop-yarn-client.jar 
			dependency> <groupId>org.apache.hadoop</groupId> <artifactId>hadoop-mapreduce-examples</artifactId> 
			<version>${hadoop.version}</version> <type>test-jar</type> <scope>provided</scope> 
			</dependency -->

		<dependency>
			<groupId>org.apache.hadoop</groupId>
			<artifactId>hadoop-mapreduce-examples</artifactId>
			<version>0.23.7</version>
			<scope>provided</scope>
		</dependency>

	</dependencies>

</project>
